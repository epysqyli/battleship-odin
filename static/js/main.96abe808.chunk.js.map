{"version":3,"sources":["components/Cell.js","components/Gameboard.js","lib/shipFactory.js","components/Ships.js","lib/ships.js","lib/gameboard.js","lib/player.js","App.js","index.js"],"names":["Cell","props","cell","coords","onCellClicked","clickable","firstStageOver","ship","className","isSunk","attack","onClick","miss","Gameboard","boardOwner","owner","boardOwnerName","playerBoard","board","getCellInfo","sort","a","b","y","reverse","map","index","shipFactory","name","length","hitRecord","shipLength","i","buildHitRecord","direction","start","sunk","hit","pos","Object","values","every","Ships","useState","unit","active","placed","ships","setShips","chooseShip","hideShip","useEffect","shipState","shipIndex","newShips","removeShip","Array","el","playerShips","carrier","battleship","cruiser","submarine","destroyer","computerShips","gameboard","x","push","getCoords","find","item","placeShip","shipType","Error","coordsToCheck","forEach","some","receiveAttack","hitPosition","allSunk","filter","shipCell","createPlayer","playerName","enemy","chooseRandomCell","Math","floor","random","randomAttack","placeShipsDefault","App","player","setPlayer","computer","setComputer","enoughShips","setEnoughShips","playerShipsPlaced","setPlayerShipsPlaced","currentShip","setCurrentShip","chosenCell","setChosenCell","shipAmount","setShipAmount","shipPlaced","setShipPlaced","shipDirection","setShipDirection","turnMessage","setTurnMessage","playerMoved","setPlayerMoved","hitStreak","setHitStreak","computerMoved","setComputerMoved","computerStreak","setComputerStreak","randomCell","setRandomCell","randomCells","setRandomCells","winner","setWinner","generateRndCell","rndCell","includes","newRandomCells","checkWinner","console","log","attackPlayer","newComputer","placeDefaultShips","shipName","newShipPlaced","newPlayerState","newShipAmount","setTimeout","firstStage","selectedShip","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAkDeA,EA/CF,SAACC,GACZ,IAAMC,EAAOD,EAAME,OACbC,EAAgBH,EAAMG,cACtBC,EAAYJ,EAAMI,UAGxB,OAFuBJ,EAAMK,eAGvBJ,EAAKK,KAEL,qBACEC,UACEN,EAAKK,KAAKE,SACN,YACAP,EAAKQ,OACL,WACA,iBAENC,QAASP,IAKX,qBACEI,UAAWN,EAAKU,KAAO,YAAc,iBACrCD,QAASP,IAKXF,EAAKK,KAEL,qBACEC,UAAWH,EAAY,YAAc,sBACrCM,QAASP,IAKX,qBACEI,UAAWH,EAAY,OAAS,iBAChCM,QAASP,KCTJS,G,MA9BG,SAACZ,GACjB,IAAMa,EAAab,EAAMc,MACnBC,EAAiBF,EAAWG,YAAYF,MACxCG,EAAQJ,EAAWG,YAAYC,MAC/BC,EAAclB,EAAMkB,YACpBd,EAAYJ,EAAMI,UAClBC,EAAiBL,EAAMK,eAG7B,OAFAY,EAAME,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,EAAID,EAAEC,EAAI,GAAK,KAGrC,sBAAKf,UAAU,sBAAf,UACE,+BAAKQ,EAAL,gBACA,qBAAKR,UAAU,YAAf,SACGU,EAAMM,UAAUC,KAAI,SAACvB,EAAMwB,GAC1B,OACE,cAAC,EAAD,CACEvB,OAAQD,EACRa,MAAOC,EACPX,UAAWA,EACXC,eAAgBA,EAChBF,cAAe,kBAAMe,EAAYjB,KAC5BwB,aChBbC,EAAc,SAACC,EAAMC,GACzB,IAAMC,EATe,SAACC,GAEtB,IADA,IAAID,EAAY,GACPE,EAAI,EAAGA,EAAID,EAAYC,IAC9BF,EAAUE,GAAK,QAEjB,OAAOF,EAIWG,CAAeJ,GAajC,MAAO,CACLD,OACAC,SACAK,UAAW,KACXC,MAAO,KACPL,YACAM,MAAM,EACNC,IAlBU,SAACC,GACXR,EAAUQ,GAAO,OAkBjB7B,OAfa,WACb,QAAI8B,OAAOC,OAAOV,GAAWW,OAAM,SAACH,GAAD,MAAiB,QAARA,QCqDjCI,G,MAlED,SAACzC,GACb,MAA0B0C,mBAAS,CACjC,CAAEC,KAAMjB,EAAY,UAAW,GAAIkB,QAAQ,EAAOC,QAAQ,GAC1D,CAAEF,KAAMjB,EAAY,aAAc,GAAIkB,QAAQ,EAAOC,QAAQ,GAC7D,CAAEF,KAAMjB,EAAY,UAAW,GAAIkB,QAAQ,EAAOC,QAAQ,GAC1D,CAAEF,KAAMjB,EAAY,YAAa,GAAIkB,QAAQ,EAAOC,QAAQ,GAC5D,CAAEF,KAAMjB,EAAY,YAAa,GAAIkB,QAAQ,EAAOC,QAAQ,KAL9D,mBAAOC,EAAP,KAAcC,EAAd,KAOMC,EAAahD,EAAMgD,WACnBC,EAAWjD,EAAMiD,SAYvB,OAJAC,qBAAU,WACJD,GAPa,SAACE,EAAWC,GAC7B,IAAIC,EAAQ,YAAOP,GACnBO,EAASD,GAAWP,OAASM,EAC7BJ,EAASM,GAIKC,CAAWL,EAAS,GAAIA,EAAS,MAC9C,CAACA,IAGF,sBAAK1C,UAAU,kBAAf,UACE,+DACA,qFACA,qBAAKA,UAAU,QAAf,SACGuC,EAAMtB,KAAI,SAAClB,EAAMmB,GAChB,OAAInB,EAAKuC,OACA,KAGL,sBACEtC,UACED,EAAKsC,OACD,+BACA,iBAENlC,QAAS,WACP,IAAI2C,EAAQ,YAAOP,GACnBO,EAAS7B,KAAI,SAAClB,GAAD,OAAWA,EAAKsC,QAAS,KACtCG,EAASM,IACTA,EAAQ,YAAOP,IACNrB,GAAS,CAChBkB,KAAMjB,EAAYpB,EAAKqC,KAAKhB,KAAMrB,EAAKqC,KAAKf,QAC5CgB,QAAQ,GAEVG,EAASM,GACTL,EAAW1C,EAAKqC,KAAMlB,IAhB1B,UAoBE,qBAAKlB,UAAU,YAAf,SAA4BD,EAAKqC,KAAKhB,OACtC,qBAAKpB,UAAU,iBAAf,SACG,YAAIgD,MAAMjD,EAAKqC,KAAKf,SAASJ,KAAI,SAACgC,EAAI/B,GACrC,OAAO,qBAAKlB,UAAU,aAAiBkB,UALtCA,aCnDfgC,EAAc,CAClB,CAAEC,QAAShC,EAAY,UAAW,IAClC,CAAEiC,WAAYjC,EAAY,aAAc,IACxC,CAAEkC,QAASlC,EAAY,UAAW,IAClC,CAAEmC,UAAWnC,EAAY,YAAa,IACtC,CAAEoC,UAAWpC,EAAY,YAAa,KAGlCqC,EAAgB,CACpB,CAAEL,QAAShC,EAAY,UAAW,IAClC,CAAEiC,WAAYjC,EAAY,aAAc,IACxC,CAAEkC,QAASlC,EAAY,UAAW,IAClC,CAAEmC,UAAWnC,EAAY,YAAa,IACtC,CAAEoC,UAAWpC,EAAY,YAAa,KC6KzBsC,EA1LG,SAAClD,GAIjB,IAHA,IAAMG,EAAQ,GACVgD,EAAI,EACJ3C,EAAI,EACK,KAAN2C,GAAY3C,GAAK,IAAI,CAE1B,IADA2C,EAAI,EACGA,GAAK,IACVhD,EAAMiD,KAAK,CACTD,IACA3C,IACAhB,KAAM,KACNK,MAAM,EACNF,QAAQ,IAEVwD,IAEF3C,IAGF,IAAM6C,EAAY,SAACF,EAAG3C,GACpB,OAAOL,EAAMmD,MAAK,SAACC,GAAD,OAAWA,EAAKJ,IAAMA,EAAMI,EAAK/C,IAAMA,MAmK3D,MAAO,CAAEL,QAAOH,QAAOqD,YAAWG,UAhKhB,SAACC,EAAUtC,EAAWgC,EAAG3C,GACzC,GAAI2C,EAAI,IAAM3C,EAAI,GAChB,MAAM,IAAIkD,MAAM,2CAGJ,WAAV1D,EAAqB,WACvB,IAAMR,EAAOmD,EAAYW,MAAK,SAAC9D,GAAD,OAAUA,EAAKiE,MACzCzC,EAAaxB,EAAKiE,GAAU3C,OAEhC,GAAkB,eAAdK,GACF,GAAIgC,EAAInC,EAAa,EAAI,GACvB,MAAM,IAAI0C,MAAM,uCAEb,GAAkB,aAAdvC,GACLX,EAAIQ,EAAa,EAAI,GACvB,MAAM,IAAI0C,MAAM,kCAgCpB,GA5BkB,eAAdvC,EAA6B,WAE/B,IADA,IAAIwC,EAAgB,GADU,WAErB1C,GACPd,EAAMyD,SAAQ,SAACxE,GACTA,EAAO+D,IAAMA,EAAIlC,GAAK7B,EAAOoB,IAAMA,GACrCmD,EAAcP,KAAKhE,OAHhB6B,EAAI,EAAGA,EAAID,EAAYC,IAAM,EAA7BA,GAOT,GAAI0C,EAAcE,MAAK,SAACzE,GAAD,OAAYA,EAAOI,QACxC,MAAM,IAAIkE,MAAM,oBAVa,GAYR,aAAdvC,GAA2B,WAEpC,IADA,IAAIwC,EAAgB,GACX1C,EAAI,EAAGA,EAAID,EAAYC,IAC9Bd,EAAMyD,SAAQ,SAACxE,GACTA,EAAO+D,IAAMA,GAAK/D,EAAOoB,IAAMA,EAAI,GACrCmD,EAAcP,KAAKhE,MAIzB,GAAIuE,EAAcE,MAAK,SAACzE,GAAD,OAAYA,EAAOI,QACxC,MAAM,IAAIkE,MAAM,oBAVkB,GAetClE,EAAKiE,GAAUrC,MAAQ,CAAE+B,EAAGA,EAAG3C,EAAGA,GAChB,eAAdW,EAA4B,CAC9B3B,EAAKiE,GAAUtC,UAAY,aAC3B,IAF8B,eAErBF,GACPd,EAAMyD,SAAQ,SAACxE,GACTA,EAAO+D,IAAMA,EAAIlC,GAAK7B,EAAOoB,IAAMA,IACrCpB,EAAOI,KAAOA,EAAKiE,QAHhBxC,EAAI,EAAGA,EAAID,EAAYC,IAAM,EAA7BA,QAOJ,GAAkB,aAAdE,EAA0B,CACnC3B,EAAKiE,GAAUtC,UAAY,WAC3B,IAFmC,eAE1BF,GACPd,EAAMyD,SAAQ,SAACxE,GACTA,EAAO+D,IAAMA,GAAK/D,EAAOoB,IAAMA,EAAIS,IACrC7B,EAAOI,KAAOA,EAAKiE,QAHhBxC,EAAI,EAAGA,EAAID,EAAYC,IAAM,EAA7BA,IArDY,GA6DJ,aAAVjB,GAAuB,WAChC,IAAMR,EAAOyD,EAAcK,MAAK,SAAC9D,GAAD,OAAUA,EAAKiE,MAC3CzC,EAAaxB,EAAKiE,GAAU3C,OAEhC,GAAkB,eAAdK,GACF,GAAIgC,EAAInC,EAAa,EAAI,GACvB,MAAM,IAAI0C,MAAM,uCAEb,GAAkB,aAAdvC,GACLX,EAAIQ,EAAa,EAAI,GACvB,MAAM,IAAI0C,MAAM,kCAgCpB,GA5BkB,eAAdvC,EAA6B,WAE/B,IADA,IAAIwC,EAAgB,GADU,WAErB1C,GACPd,EAAMyD,SAAQ,SAACxE,GACTA,EAAO+D,IAAMA,EAAIlC,GAAK7B,EAAOoB,IAAMA,GACrCmD,EAAcP,KAAKhE,OAHhB6B,EAAI,EAAGA,EAAID,EAAYC,IAAM,EAA7BA,GAOT,GAAI0C,EAAcE,MAAK,SAACzE,GAAD,OAAYA,EAAOI,QACxC,MAAM,IAAIkE,MAAM,oBAVa,GAYR,aAAdvC,GAA2B,WAEpC,IADA,IAAIwC,EAAgB,GACX1C,EAAI,EAAGA,EAAID,EAAYC,IAC9Bd,EAAMyD,SAAQ,SAACxE,GACTA,EAAO+D,IAAMA,GAAK/D,EAAOoB,IAAMA,EAAI,GACrCmD,EAAcP,KAAKhE,MAIzB,GAAIuE,EAAcE,MAAK,SAACzE,GAAD,OAAYA,EAAOI,QACxC,MAAM,IAAIkE,MAAM,oBAVkB,GAetClE,EAAKiE,GAAUrC,MAAQ,CAAE+B,EAAGA,EAAG3C,EAAGA,GAChB,eAAdW,EAA4B,CAC9B3B,EAAKiE,GAAUtC,UAAY,aAC3B,IAF8B,eAErBF,GACPd,EAAMyD,SAAQ,SAACxE,GACTA,EAAO+D,IAAMA,EAAIlC,GAAK7B,EAAOoB,IAAMA,IACrCpB,EAAOI,KAAOA,EAAKiE,QAHhBxC,EAAI,EAAGA,EAAID,EAAYC,IAAM,EAA7BA,QAOJ,GAAkB,aAAdE,EAA0B,CACnC3B,EAAKiE,GAAUtC,UAAY,WAC3B,IAFmC,eAE1BF,GACPd,EAAMyD,SAAQ,SAACxE,GACTA,EAAO+D,IAAMA,GAAK/D,EAAOoB,IAAMA,EAAIS,IACrC7B,EAAOI,KAAOA,EAAKiE,QAHhBxC,EAAI,EAAGA,EAAID,EAAYC,IAAM,EAA7BA,IArDqB,IA8FS6C,cA9BvB,SAACX,EAAG3C,GACxB,IAAMrB,EAAOkE,EAAUF,EAAG3C,GAC1B,GAAIrB,EAAKU,MAAQV,EAAKQ,OACpB,MAAM,IAAI+D,MAAM,6BAGlBvD,EAAMyD,SAAQ,SAACxE,GACb,GAAIA,EAAO+D,IAAMA,GAAK/D,EAAOoB,IAAMA,EACjC,GAAIpB,EAAOI,KAAM,CACfJ,EAAOO,QAAS,EAChB,IAAMH,EAAOJ,EAAOI,KACpB,GAAuB,eAAnBA,EAAK2B,UAA4B,CACnC,IAAM4C,EAAc3E,EAAO+D,EAAI3D,EAAK4B,MAAM+B,EAC1C3D,EAAK8B,IAAIyC,QACJ,GAAuB,aAAnBvE,EAAK2B,UAA0B,CACxC,IAAM4C,EAAc3E,EAAOoB,EAAIhB,EAAK4B,MAAMZ,EAC1ChB,EAAK8B,IAAIyC,SAGX3E,EAAOS,MAAO,MAWsCmE,QAL5C,WAEd,OADkB7D,EAAM8D,QAAO,SAAC9E,GAAD,OAAUA,EAAKK,QAC7BkC,OAAM,SAACwC,GAAD,OAAcA,EAAS1E,KAAKE,eCjJxCyE,EAnCM,SAACC,GACpB,IAAMlE,EAAcgD,EAAUkB,GAyB9B,MAAO,CACLlE,cACAP,OAjBa,SAACwD,EAAG3C,EAAG6D,GACpBA,EAAMnE,YAAY4D,cAAcX,EAAG3C,IAiBnC8D,iBAduB,SAACD,GACxB,IAAIlB,EAAIoB,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EACrCjE,EAAI+D,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,EAEzC,OADaJ,EAAMnE,YAAYmD,UAAUF,EAAG3C,IAY5CkE,aARmB,SAACL,EAAOlB,EAAG3C,GAC9B6D,EAAMnE,YAAY4D,cAAcX,EAAG3C,IAQnCmE,kBA5BwB,WACxBzE,EAAYsD,UAAU,UAAW,aAAc,EAAG,GAClDtD,EAAYsD,UAAU,aAAc,WAAY,EAAG,GACnDtD,EAAYsD,UAAU,UAAW,WAAY,EAAG,GAChDtD,EAAYsD,UAAU,YAAa,aAAc,EAAG,GACpDtD,EAAYsD,UAAU,YAAa,aAAc,EAAG,MCoOzCoB,G,MAxOH,WACV,MAA4BhD,mBAASuC,EAAa,WAAlD,mBAAOU,EAAP,KAAeC,EAAf,KACA,EAAgClD,mBAASuC,EAAa,aAAtD,mBAAOY,EAAP,KAAiBC,EAAjB,KACA,EAAsCpD,oBAAS,GAA/C,mBAAOqD,EAAP,KAAoBC,EAApB,KACA,EAAkDtD,oBAAS,GAA3D,mBAAOuD,EAAP,KAA0BC,EAA1B,KACA,EAAsCxD,qBAAtC,mBAAOyD,EAAP,KAAoBC,EAApB,KACA,EAAoC1D,mBAAS,CAAEuB,EAAG,KAAM3C,EAAG,OAA3D,mBAAO+E,EAAP,KAAmBC,EAAnB,KACA,EAAoC5D,mBAAS,GAA7C,mBAAO6D,EAAP,KAAmBC,EAAnB,KACA,EAAoC9D,mBAAS,EAAC,EAAO,IAArD,mBAAO+D,EAAP,KAAmBC,EAAnB,KACA,EAA0ChE,mBAAS,cAAnD,mBAAOiE,EAAP,KAAsBC,EAAtB,KACA,EAAsClE,mBAAS,iBAA/C,mBAAOmE,EAAP,KAAoBC,EAApB,KACA,EAAsCpE,oBAAS,GAA/C,mBAAOqE,EAAP,KAAoBC,EAApB,KACA,EAAkCtE,oBAAS,GAA3C,mBAAOuE,GAAP,KAAkBC,GAAlB,KACA,GAA0CxE,oBAAS,GAAnD,qBAAOyE,GAAP,MAAsBC,GAAtB,MACA,GAA4C1E,oBAAS,GAArD,qBAAO2E,GAAP,MAAuBC,GAAvB,MACA,GAAoC5E,mBAAS,MAA7C,qBAAO6E,GAAP,MAAmBC,GAAnB,MACA,GAAsC9E,mBAAS,IAA/C,qBAAO+E,GAAP,MAAoBC,GAApB,MACA,GAA4BhF,mBAAS,MAArC,qBAAOiF,GAAP,MAAeC,GAAf,MA6CMC,GAAkB,WAEtB,IADA,IAAIC,EAAUjC,EAAST,iBAAiBO,GACjC8B,GAAYM,SAASD,IAC1BA,EAAUjC,EAAST,iBAAiBO,GAEtC6B,GAAcM,GACd,IAAIE,EAAc,YAAOP,IACzBO,EAAe9D,KAAK4D,GACpBJ,GAAeM,IAGXC,GAAc,WACdN,IAAQO,QAAQC,IAAR,UAAeR,GAAf,WAqBRS,GAAe,WACnBP,KACAhC,EAASL,aAAaG,EAAQ4B,GAAWtD,EAAGsD,GAAWjG,GACnDiG,GAAWjH,MACbgH,IAAkB,GAClBF,IAAiB,GACbzB,EAAO3E,YAAY8D,YACrB8C,GAAU/B,EAAS7E,YAAYF,OAC/BmH,QAGFX,IAAkB,GAClBF,IAAiB,GACjBN,EAAe,kBAEjBE,GAAe,IA6DjB,OArCA9D,qBAAU,YAvFgB,WACxB,IAAImF,EAAW,eAAQxC,GACvBwC,EAAY5C,oBACZK,EAAYuC,GAqFZC,GACAT,OACC,IAEH3E,qBAAU,WACJiD,GAAeE,GA3BH,SAACkC,EAAUtG,EAAWgC,EAAG3C,GAEzC,IAKIkH,EALAC,EAAc,eAAQ9C,GAC1B8C,EAAezH,YAAYsD,UAAUiE,EAAUtG,EAAWgC,EAAG3C,GAC7DsE,EAAU6C,GAIVD,EAAgB,EAAC,EAAM/B,EAAW,IAClCC,EAAc8B,GAGdpC,EAAe,MACfE,EAAc,MAGd,IAAIoC,EAAgBnC,EACpBmC,IACAlC,EAAckC,GAUZpE,CAAU6B,EAAYxE,KAAMgF,EAAeN,EAAWpC,EAAGoC,EAAW/E,KAErE,CAAC+E,IAGJnD,qBAAU,WACJ+C,GAAqBc,IAAgBE,IACvC0B,WAAWP,GAAc,OAE1B,CAACnB,GAAWF,IAEf7D,qBAAU,WACJ+D,IAAWD,GAAe,KAC7B,CAACC,GAAWF,IAIf7D,qBAAU,WACJmE,IAAkBF,IAAewB,WAAWP,GAAc,OAC7D,CAACf,GAAgBF,KAEpBjE,qBAAU,WACJmE,IAAgBD,IAAiB,KACpC,CAACC,GAAgBF,KAGpBjE,qBAAU,WACW,IAAfqD,GAAkBP,GAAe,KACpC,CAACO,IAEAN,EAEA,sBAAK1F,UAAU,MAAf,UACE,iDACA,sBAAKA,UAAWoH,GAAS,aAAe,SAAxC,UACE,gCAAMA,GAAN,0BACA,qBAAKpH,UAAU,MAAMG,QAAS,kBA7JpCkF,EAAUX,EAAa,WACvBa,EAAYb,EAAa,aACzBe,GAAe,GACfE,GAAqB,GACrBE,IACAE,EAAc,CAAErC,EAAG,KAAM3C,EAAG,OAC5BkF,EAAc,GACdE,EAAc,EAAC,EAAO,IACtBE,EAAiB,cACjBE,EAAe,iBACfE,GAAe,GACfE,IAAa,GACbE,IAAiB,GACjBE,IAAkB,GAClBE,GAAc,MACdE,GAAe,SACfE,GAAU,OA6IJ,2BAIF,sBAAKrH,UAAWoH,GAAS,sBAAwB,YAAjD,UACE,cAAC,EAAD,CACE7G,MAAO6E,EACPtF,eAAgB4F,EAChB/E,YAAakH,KAEf,cAAC,EAAD,CACEtH,MAAO+E,EACPxF,eAAgB4F,EAChB/E,YAjHa,SAACjB,GACtB0F,EAAOlF,OAAOR,EAAKgE,EAAGhE,EAAKqB,EAAGuE,GAC1B5F,EAAKK,MACP4G,IAAa,GACbF,GAAe,GACXnB,EAAS7E,YAAY8D,YACvB8C,GAAUjC,EAAO3E,YAAYF,OAC7BmH,MAEFnB,EAAe,mBAEfI,IAAa,GACbF,GAAe,GACfF,EAAe,oBAEjBM,IAAiB,SAqGb,qBAAK7G,UAAU,aAAf,SAA6BsG,OAK/B,sBAAKtG,UAAU,MAAf,UACE,iDACA,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CACEO,MAAO6E,EACPvF,UAAWqG,EAAW,GACtBmC,WAAY3C,EACZ/E,YAnJM,SAACjB,GACfqG,EAAc,CAAErC,EAAGhE,EAAKgE,EAAG3C,EAAGrB,EAAKqB,OAqJ7B,sBAAKf,UAAU,kBAAf,UACE,cAAC,EAAD,CACEO,MAAO6E,EACP3C,WA9JQ,SAAC6F,EAAc9G,GACjCqE,EAAeyC,GACfnC,EAAc,EAAC,EAAO3E,KA6JZkB,SAAUwD,EAAW,GAAKA,EAAa,OAEzC,qBAAKlG,UAAU,mBAAmBG,QA/KpB,WAEpBkG,EADoB,eAAlBD,EACe,WAEA,eA2KX,SACqB,eAAlBA,EAAiC,aAAe,mBAIvD,qBACEpG,UAAWwF,EAAc,aAAe,oBACxCrF,QAAS,WACHqF,GAAaG,GAAqB,IAH1C,6BC5NR4C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.96abe808.chunk.js","sourcesContent":["import { React, useEffect } from \"react\";\nimport \"../styles/cell.scss\";\n\nconst Cell = (props) => {\n  const cell = props.coords;\n  const onCellClicked = props.onCellClicked;\n  const clickable = props.clickable;\n  const firstStageOver = props.firstStageOver;\n\n  if (firstStageOver) {\n    if (cell.ship) {\n      return (\n        <div\n          className={\n            cell.ship.isSunk()\n              ? \"cell sunk\"\n              : cell.attack\n              ? \"cell hit\"\n              : \"cell clickable\"\n          }\n          onClick={onCellClicked}\n        ></div>\n      );\n    } else {\n      return (\n        <div\n          className={cell.miss ? \"cell miss\" : \"cell clickable\"}\n          onClick={onCellClicked}\n        ></div>\n      );\n    }\n  } else {\n    if (cell.ship) {\n      return (\n        <div\n          className={clickable ? \"cell ship\" : \"cell ship clickable\"}\n          onClick={onCellClicked}\n        ></div>\n      );\n    } else {\n      return (\n        <div\n          className={clickable ? \"cell\" : \"cell clickable\"}\n          onClick={onCellClicked}\n        ></div>\n      );\n    }\n  }\n};\n\nexport default Cell;\n","import React from \"react\";\nimport Cell from \"./Cell\";\nimport \"../styles/gameboard.scss\";\n\nconst Gameboard = (props) => {\n  const boardOwner = props.owner;\n  const boardOwnerName = boardOwner.playerBoard.owner;\n  const board = boardOwner.playerBoard.board;\n  const getCellInfo = props.getCellInfo;\n  const clickable = props.clickable;\n  const firstStageOver = props.firstStageOver;\n  board.sort((a, b) => (a.y > b.y ? 1 : -1));\n\n  return (\n    <div className=\"gameboard-container\">\n      <h2>{boardOwnerName} gameboard</h2>\n      <div className=\"gameboard\">\n        {board.reverse().map((cell, index) => {\n          return (\n            <Cell\n              coords={cell}\n              owner={boardOwnerName}\n              clickable={clickable}\n              firstStageOver={firstStageOver}\n              onCellClicked={() => getCellInfo(cell)}\n              key={index}\n            ></Cell>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Gameboard;\n","\nconst buildHitRecord = (shipLength) => {\n  let hitRecord = {};\n  for (let i = 0; i < shipLength; i++) {\n    hitRecord[i] = \"clear\";\n  }\n  return hitRecord;\n};\n\nconst shipFactory = (name, length) => {\n  const hitRecord = buildHitRecord(length);\n\n  const hit = (pos) => {\n    hitRecord[pos] = \"hit\";\n  };\n\n  const isSunk = () => {\n    if (Object.values(hitRecord).every((pos) => pos === \"hit\")) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return {\n    name,\n    length,\n    direction: null,\n    start: null,\n    hitRecord,\n    sunk: false,\n    hit,\n    isSunk,\n  };\n};\n\nexport { buildHitRecord, shipFactory };\n","import { React, useState, useEffect } from \"react\";\nimport { shipFactory } from \"../lib/shipFactory\";\nimport \"../styles/ships.scss\";\n\nconst Ships = (props) => {\n  const [ships, setShips] = useState([\n    { unit: shipFactory(\"carrier\", 5), active: false, placed: false },\n    { unit: shipFactory(\"battleship\", 4), active: false, placed: false },\n    { unit: shipFactory(\"cruiser\", 3), active: false, placed: false },\n    { unit: shipFactory(\"submarine\", 3), active: false, placed: false },\n    { unit: shipFactory(\"destroyer\", 2), active: false, placed: false },\n  ]);\n  const chooseShip = props.chooseShip;\n  const hideShip = props.hideShip;\n\n  const removeShip = (shipState, shipIndex) => {\n    let newShips = [...ships];\n    newShips[shipIndex].placed = shipState;\n    setShips(newShips);\n  };\n\n  useEffect(() => {\n    if (hideShip) removeShip(hideShip[0], hideShip[1]);\n  }, [hideShip]);\n\n  return (\n    <div className=\"ships-placement\">\n      <h2>place your ships on the board</h2>\n      <p>Click on the ship first and then on the desired cell</p>\n      <div className=\"ships\">\n        {ships.map((ship, index) => {\n          if (ship.placed) {\n            return null;\n          } else {\n            return (\n              <div\n                className={\n                  ship.active\n                    ? \"ship-container selected-ship\"\n                    : \"ship-container\"\n                }\n                onClick={() => {\n                  let newShips = [...ships];\n                  newShips.map((ship) => (ship.active = false));\n                  setShips(newShips);\n                  newShips = [...ships];\n                  newShips[index] = {\n                    unit: shipFactory(ship.unit.name, ship.unit.length),\n                    active: true,\n                  };\n                  setShips(newShips);\n                  chooseShip(ship.unit, index);\n                }}\n                key={index}\n              >\n                <div className=\"ship-name\">{ship.unit.name}</div>\n                <div className=\"unit-container\">\n                  {[...Array(ship.unit.length)].map((el, index) => {\n                    return <div className=\"unit-cell\" key={index}></div>;\n                  })}\n                </div>\n              </div>\n            );\n          }\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Ships;\n\n// how to remove already placed ships from the player's choice?\n","import { shipFactory } from \"./shipFactory\";\n\nconst playerShips = [\n  { carrier: shipFactory(\"carrier\", 5) },\n  { battleship: shipFactory(\"battleship\", 4) },\n  { cruiser: shipFactory(\"cruiser\", 3) },\n  { submarine: shipFactory(\"submarine\", 3) },\n  { destroyer: shipFactory(\"destroyer\", 2) },\n];\n\nconst computerShips = [\n  { carrier: shipFactory(\"carrier\", 5) },\n  { battleship: shipFactory(\"battleship\", 4) },\n  { cruiser: shipFactory(\"cruiser\", 3) },\n  { submarine: shipFactory(\"submarine\", 3) },\n  { destroyer: shipFactory(\"destroyer\", 2) },\n];\n\nexport { playerShips, computerShips };\n","import { playerShips, computerShips } from \"./ships\";\n\nconst gameboard = (owner) => {\n  const board = [];\n  let x = 1;\n  let y = 1;\n  while (x !== 10 && y <= 10) {\n    x = 1;\n    while (x <= 10) {\n      board.push({\n        x,\n        y,\n        ship: null,\n        miss: false,\n        attack: false,\n      });\n      x++;\n    }\n    y++;\n  }\n\n  const getCoords = (x, y) => {\n    return board.find((item) => (item.x === x) & (item.y === y));\n  };\n\n  const placeShip = (shipType, direction, x, y) => {\n    if (x > 10 || y > 10) {\n      throw new Error(\"Either x or y are not valid coordinates\");\n    }\n\n    if (owner === \"player\") {\n      const ship = playerShips.find((ship) => ship[shipType]);\n      let shipLength = ship[shipType].length;\n      //  general coordinates validity check based on ship length\n      if (direction === \"horizontal\") {\n        if (x + shipLength - 1 > 10) {\n          throw new Error(\"Ship does not fit on the board\");\n        }\n      } else if (direction === \"vertical\") {\n        if (y + shipLength - 1 > 10) {\n          throw new Error(\"Ship does not fit on the board\");\n        }\n      }\n\n      if (direction === \"horizontal\") {\n        let coordsToCheck = [];\n        for (let i = 0; i < shipLength; i++) {\n          board.forEach((coords) => {\n            if (coords.x === x + i && coords.y === y) {\n              coordsToCheck.push(coords);\n            }\n          });\n        }\n        if (coordsToCheck.some((coords) => coords.ship)) {\n          throw new Error(\"Path is not free\");\n        }\n      } else if (direction === \"vertical\") {\n        let coordsToCheck = [];\n        for (let i = 0; i < shipLength; i++) {\n          board.forEach((coords) => {\n            if (coords.x === x && coords.y === y + 1) {\n              coordsToCheck.push(coords);\n            }\n          });\n        }\n        if (coordsToCheck.some((coords) => coords.ship)) {\n          throw new Error(\"Path is not free\");\n        }\n      }\n\n      // place ship on the cells since all checks have been passed\n      ship[shipType].start = { x: x, y: y };\n      if (direction === \"horizontal\") {\n        ship[shipType].direction = \"horizontal\";\n        for (let i = 0; i < shipLength; i++) {\n          board.forEach((coords) => {\n            if (coords.x === x + i && coords.y === y) {\n              coords.ship = ship[shipType];\n            }\n          });\n        }\n      } else if (direction === \"vertical\") {\n        ship[shipType].direction = \"vertical\";\n        for (let i = 0; i < shipLength; i++) {\n          board.forEach((coords) => {\n            if (coords.x === x && coords.y === y + i) {\n              coords.ship = ship[shipType];\n            }\n          });\n        }\n      }\n    } else if (owner === \"computer\") {\n      const ship = computerShips.find((ship) => ship[shipType]);\n      let shipLength = ship[shipType].length;\n      //  general coordinates validity check based on ship length\n      if (direction === \"horizontal\") {\n        if (x + shipLength - 1 > 10) {\n          throw new Error(\"Ship does not fit on the board\");\n        }\n      } else if (direction === \"vertical\") {\n        if (y + shipLength - 1 > 10) {\n          throw new Error(\"Ship does not fit on the board\");\n        }\n      }\n\n      if (direction === \"horizontal\") {\n        let coordsToCheck = [];\n        for (let i = 0; i < shipLength; i++) {\n          board.forEach((coords) => {\n            if (coords.x === x + i && coords.y === y) {\n              coordsToCheck.push(coords);\n            }\n          });\n        }\n        if (coordsToCheck.some((coords) => coords.ship)) {\n          throw new Error(\"Path is not free\");\n        }\n      } else if (direction === \"vertical\") {\n        let coordsToCheck = [];\n        for (let i = 0; i < shipLength; i++) {\n          board.forEach((coords) => {\n            if (coords.x === x && coords.y === y + 1) {\n              coordsToCheck.push(coords);\n            }\n          });\n        }\n        if (coordsToCheck.some((coords) => coords.ship)) {\n          throw new Error(\"Path is not free\");\n        }\n      }\n\n      // place ship on the cells since all checks have been passed\n      ship[shipType].start = { x: x, y: y };\n      if (direction === \"horizontal\") {\n        ship[shipType].direction = \"horizontal\";\n        for (let i = 0; i < shipLength; i++) {\n          board.forEach((coords) => {\n            if (coords.x === x + i && coords.y === y) {\n              coords.ship = ship[shipType];\n            }\n          });\n        }\n      } else if (direction === \"vertical\") {\n        ship[shipType].direction = \"vertical\";\n        for (let i = 0; i < shipLength; i++) {\n          board.forEach((coords) => {\n            if (coords.x === x && coords.y === y + i) {\n              coords.ship = ship[shipType];\n            }\n          });\n        }\n      }\n    }\n  };\n\n  const receiveAttack = (x, y) => {\n    const cell = getCoords(x, y);\n    if (cell.miss || cell.attack) {\n      throw new Error(\"Cell has already been hit\");\n    }\n\n    board.forEach((coords) => {\n      if (coords.x === x && coords.y === y) {\n        if (coords.ship) {\n          coords.attack = true;\n          const ship = coords.ship;\n          if (ship.direction === \"horizontal\") {\n            const hitPosition = coords.x - ship.start.x;\n            ship.hit(hitPosition);\n          } else if (ship.direction === \"vertical\") {\n            const hitPosition = coords.y - ship.start.y;\n            ship.hit(hitPosition);\n          }\n        } else {\n          coords.miss = true;\n        }\n      }\n    });\n  };\n\n  const allSunk = () => {\n    const shipCells = board.filter((cell) => cell.ship);\n    return shipCells.every((shipCell) => shipCell.ship.isSunk());\n  };\n\n  return { board, owner, getCoords, placeShip, receiveAttack, allSunk };\n};\n\nexport default gameboard;\n","import gameboard from \"./gameboard\";\n\nconst createPlayer = (playerName) => {\n  const playerBoard = gameboard(playerName);\n\n  const placeShipsDefault = () => {\n    playerBoard.placeShip(\"carrier\", \"horizontal\", 1, 1);\n    playerBoard.placeShip(\"battleship\", \"vertical\", 2, 5);\n    playerBoard.placeShip(\"cruiser\", \"vertical\", 4, 7);\n    playerBoard.placeShip(\"submarine\", \"horizontal\", 6, 6);\n    playerBoard.placeShip(\"destroyer\", \"horizontal\", 4, 3);\n  };\n\n  const attack = (x, y, enemy) => {\n    enemy.playerBoard.receiveAttack(x, y);\n  };\n\n  const chooseRandomCell = (enemy) => {\n    let x = Math.floor(Math.random() * 10) + 1;\n    let y = Math.floor(Math.random() * 10) + 1;\n    const cell = enemy.playerBoard.getCoords(x, y);\n    return cell;\n  };\n\n  const randomAttack = (enemy, x, y) => {\n    enemy.playerBoard.receiveAttack(x, y);\n  };\n\n  return {\n    playerBoard,\n    attack,\n    chooseRandomCell,\n    randomAttack,\n    placeShipsDefault,\n  };\n};\n\nexport default createPlayer;\n","import { React, useState, useEffect } from \"react\";\nimport Gameboard from \"./components/Gameboard\";\nimport Ships from \"./components/Ships\";\nimport createPlayer from \"./lib/player\";\nimport \"./styles/app.scss\";\n\nconst App = () => {\n  const [player, setPlayer] = useState(createPlayer(\"player\"));\n  const [computer, setComputer] = useState(createPlayer(\"computer\"));\n  const [enoughShips, setEnoughShips] = useState(false);\n  const [playerShipsPlaced, setPlayerShipsPlaced] = useState(false);\n  const [currentShip, setCurrentShip] = useState();\n  const [chosenCell, setChosenCell] = useState({ x: null, y: null });\n  const [shipAmount, setShipAmount] = useState(0);\n  const [shipPlaced, setShipPlaced] = useState([false, 0]);\n  const [shipDirection, setShipDirection] = useState(\"horizontal\");\n  const [turnMessage, setTurnMessage] = useState(\"player's turn\");\n  const [playerMoved, setPlayerMoved] = useState(false);\n  const [hitStreak, setHitStreak] = useState(false);\n  const [computerMoved, setComputerMoved] = useState(false);\n  const [computerStreak, setComputerStreak] = useState(false);\n  const [randomCell, setRandomCell] = useState(null);\n  const [randomCells, setRandomCells] = useState([]);\n  const [winner, setWinner] = useState(null);\n\n  const resetApp = () => {\n    setPlayer(createPlayer(\"player\"));\n    setComputer(createPlayer(\"computer\"));\n    setEnoughShips(false);\n    setPlayerShipsPlaced(false);\n    setCurrentShip();\n    setChosenCell({ x: null, y: null });\n    setShipAmount(0);\n    setShipPlaced([false, 0]);\n    setShipDirection(\"horizontal\");\n    setTurnMessage(\"player's turn\");\n    setPlayerMoved(false);\n    setHitStreak(false);\n    setComputerMoved(false);\n    setComputerStreak(false);\n    setRandomCell(null);\n    setRandomCells([]);\n    setWinner(null);\n  };\n\n  const changeDirection = () => {\n    if (shipDirection === \"horizontal\") {\n      setShipDirection(\"vertical\");\n    } else {\n      setShipDirection(\"horizontal\");\n    }\n  };\n\n  const placeDefaultShips = () => {\n    let newComputer = { ...computer };\n    newComputer.placeShipsDefault();\n    setComputer(newComputer);\n  };\n\n  const onShipClick = (selectedShip, i) => {\n    setCurrentShip(selectedShip);\n    setShipPlaced([false, i]);\n  };\n\n  const getCell = (cell) => {\n    setChosenCell({ x: cell.x, y: cell.y });\n  };\n\n  const generateRndCell = () => {\n    let rndCell = computer.chooseRandomCell(player);\n    while (randomCells.includes(rndCell)) {\n      rndCell = computer.chooseRandomCell(player);\n    }\n    setRandomCell(rndCell);\n    let newRandomCells = [...randomCells];\n    newRandomCells.push(rndCell);\n    setRandomCells(newRandomCells);\n  };\n\n  const checkWinner = () => {\n    if (winner) console.log(`${winner} wins`);\n  };\n\n  const attackComputer = (cell) => {\n    player.attack(cell.x, cell.y, computer);\n    if (cell.ship) {\n      setHitStreak(true);\n      setPlayerMoved(false);\n      if (computer.playerBoard.allSunk()) {\n        setWinner(player.playerBoard.owner);\n        checkWinner();\n      }\n      setTurnMessage(\"player's turn\");\n    } else {\n      setHitStreak(false);\n      setPlayerMoved(true);\n      setTurnMessage(\"computer's turn\");\n    }\n    setComputerMoved(false);\n  };\n\n  const attackPlayer = () => {\n    generateRndCell();\n    computer.randomAttack(player, randomCell.x, randomCell.y);\n    if (randomCell.ship) {\n      setComputerStreak(true);\n      setComputerMoved(false);\n      if (player.playerBoard.allSunk()) {\n        setWinner(computer.playerBoard.owner);\n        checkWinner();\n      }\n    } else {\n      setComputerStreak(false);\n      setComputerMoved(true);\n      setTurnMessage(\"player's turn\");\n    }\n    setPlayerMoved(false);\n  };\n\n  const placeShip = (shipName, direction, x, y) => {\n    // update player board state\n    let newPlayerState = { ...player };\n    newPlayerState.playerBoard.placeShip(shipName, direction, x, y);\n    setPlayer(newPlayerState);\n\n    // update shipPlaced state\n    let newShipPlaced = shipPlaced;\n    newShipPlaced = [true, shipPlaced[1]];\n    setShipPlaced(newShipPlaced);\n\n    // reset currentShip and chosenCell state\n    setCurrentShip(null);\n    setChosenCell(null);\n\n    // update shipAmount\n    let newShipAmount = shipAmount;\n    newShipAmount++;\n    setShipAmount(newShipAmount);\n  };\n\n  useEffect(() => {\n    placeDefaultShips();\n    generateRndCell();\n  }, []);\n\n  useEffect(() => {\n    if (currentShip && chosenCell) {\n      placeShip(currentShip.name, shipDirection, chosenCell.x, chosenCell.y);\n    }\n  }, [chosenCell]);\n\n  // manages streak logic for player\n  useEffect(() => {\n    if (playerShipsPlaced && playerMoved && !hitStreak) {\n      setTimeout(attackPlayer, 1000);\n    }\n  }, [hitStreak, playerMoved]);\n\n  useEffect(() => {\n    if (hitStreak) setPlayerMoved(true);\n  }, [hitStreak, playerMoved]);\n  // end of player streak logic\n\n  // manages streak logic for computer\n  useEffect(() => {\n    if (computerStreak && computerMoved) setTimeout(attackPlayer, 1000);\n  }, [computerStreak, computerMoved]);\n\n  useEffect(() => {\n    if (computerStreak) setComputerMoved(true);\n  }, [computerStreak, computerMoved]);\n  // end of computer streak logic\n\n  useEffect(() => {\n    if (shipAmount === 5) setEnoughShips(true);\n  }, [shipAmount]);\n\n  if (playerShipsPlaced) {\n    return (\n      <div className=\"App\">\n        <h1>Odin BattleShip</h1>\n        <div className={winner ? \"winner-box\" : \"hidden\"}>\n          <div>{winner} has won - congrats!</div>\n          <div className=\"btn\" onClick={() => resetApp()}>\n            play again\n          </div>\n        </div>\n        <div className={winner ? \"container secondary\" : \"container\"}>\n          <Gameboard\n            owner={player}\n            firstStageOver={playerShipsPlaced}\n            getCellInfo={attackPlayer}\n          ></Gameboard>\n          <Gameboard\n            owner={computer}\n            firstStageOver={playerShipsPlaced}\n            getCellInfo={attackComputer}\n          ></Gameboard>\n        </div>\n        <div className=\"turns-info\">{turnMessage}</div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        <h1>Odin BattleShip</h1>\n        <div className=\"container\">\n          <Gameboard\n            owner={player}\n            clickable={shipPlaced[0]}\n            firstStage={playerShipsPlaced}\n            getCellInfo={getCell}\n          ></Gameboard>\n\n          <div className=\"ships-component\">\n            <Ships\n              owner={player}\n              chooseShip={onShipClick}\n              hideShip={shipPlaced[0] ? shipPlaced : null}\n            />\n            <div className=\"direction-change\" onClick={changeDirection}>\n              {shipDirection === \"horizontal\" ? \"horizontal\" : \"vertical\"}\n            </div>\n          </div>\n        </div>\n        <div\n          className={enoughShips ? \"game-start\" : \"game-start hidden\"}\n          onClick={() => {\n            if (enoughShips) setPlayerShipsPlaced(true);\n          }}\n        >\n          start game\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}